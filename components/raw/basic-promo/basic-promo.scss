// defining the colours as a collection allows us to loop through them and generate classnames based on the keys
$basic-promo-pattern-colours: (
    mid-blue: $mid-blue,
    strawberry: $strawberry,
    yellow: $yellow,
    primary-blue: $primary-blue,
    turquoise: $turquoise,
    orange: $orange,
    green: $green,
    green-blue: $green-blue
);

// pictures used should be fixed at a 4x3 ratio (0.66) so this value is used for the sake of readability in calculations
$image-aspect-ratio: .66;

// the image and pattern backgrounds are positioned absolutely so that they can be overlapped by the panel itself
// but the panel might not be tall enough to show all of the background image. We need to set a min-height on the
// container panel to get around this. The min-height should always be the height of the image (and no more) and
// because we reliably know the viewport width and the aspect ratio of the image, we can work this out.
//
// 100% viewport width - (40px margin * 2) - 10px gutter = the available space of 16 columns
// available space divided into the number of columns = the image width
// image width * aspect ratio of 4/3 = the image height

$gutter: 10px;
$margin: $max-size; // max-size comes from the fluid-margins calculations elsewhere. but above ipad portrait this is always 40px
$max-width: 100vw;
$total-columns: 16;
$image-columns: 11;
$width-ratio: $image-columns / $total-columns;

// height = 100% viewport width * image aspect ratio - the margins either side of the image
$image-height-mobile: #{'calc(' + 100vw * $image-aspect-ratio + ' + ' + fluid-margin(true) + ')'};

// on tablet devices, the image width is 11 columns
// I'm sorry, 130px is a magic number to make this work and I don't know why.
$image-height-tablet: #{'calc((((' + $max-width + ' - (130px)) * (' + $width-ratio + ')) - ' + $gutter + ') * ' + $image-aspect-ratio + ')'};

// on desktop devices, the image width is 9 columns
$image-columns: 9;
$width-ratio: $image-columns / $total-columns;
// I'm sorry, 60px is a magic number to make this work and I don't know why.
$image-height-desktop: #{'calc((((' + $max-width + ' - (60px)) * (' + $width-ratio + ')) - ' + $gutter + ') * ' + $image-aspect-ratio + ')'};

// the grid is capped at 1700px wide, so above that screen size we need to cap our max width calculations by using a fixed px instead of viewport width
$max-width: 1780px;
// I'm sorry, 60px is a magic number to make this work and I don't know why.
$image-height-large-desktop: #{'calc((((' + $max-width + ' - (60px)) * (' + $width-ratio + ')) - ' + $gutter + ') * ' + $image-aspect-ratio + ')'};

// use to size the content like the lost-grid columns logic, but without the pseudo-element creation to make things difficult.
@mixin flexbox-width-without-columns($columns, $total) {
    flex-basis: 0 0 #{'calc(99.9% * ' + ($columns/$total) + ' - (' + $gutter + ' - ' + $gutter + ' * ' + ($columns/$total) + '))'};
    width: #{'calc(99.9% * ' + ($columns/$total) + ' - (' + $gutter + ' - '+$gutter+' * ' + ($columns/$total) + '))'};
    max-width: #{'calc(99.9% * ' + ($columns/$total) + ' - (' + $gutter + ' - ' + $gutter + ' * ' + ($columns/$total) + '))'};
}

.basic-promo {
    display: flex;
    position: relative;
    align-items: flex-start;
    justify-content: flex-end;
    lost-column: 8/8;
    lost-align: top-right;
    
    // on mobile (default) we don't need a minimum height, because we handle this with a margin top/bottom on the panel instead
    
    @include for-tablet-portrait-up {
        min-height: $image-height-tablet;
    }

    @include for-largerthan-ipad-portrait {
        lost-offset: 1/16;
        lost-column: 14/16;
        min-height: $image-height-desktop;
    }

    @media (min-width: 1780px) {
        min-height: $image-height-large-desktop;
    }

    &-container {
        @include margin-medium;
        width: 100%;
    }

    &-blue,
    &-black {
        .basic-promo-panel {
            background: $primary-blue;

            &,
            h3 {
                color: $white;
            }

            &-inner {
                margin-right: 20px;
                margin-left: 20px;

                .button {
                    margin-bottom: px-to-em(18, 16);
                }

                @include for-tablet-portrait-up {
                    margin-right: 0;
                    margin-left: 0;

                    .button {
                        margin-bottom: 0;
                    }
                }
            }
        }
    }

    &-black {
        .basic-promo-panel {
            background: $black;

            .button {
                .button-overlay {
                    color: $black;
                }
            }
        }
    }

    &-right-align {
        lost-align: top-left;
    }

    &-panel {
        position: relative;
        background: $white;
        // on mobile the absolutely positioned background should appear above the panel.
        // we can achieve that by adding a margin to the top of the panel which is equal to the height of the image
        margin-top: $image-height-mobile;

        &-inner {
            margin-top: 1.125rem;

            .button {
                margin-bottom: 0px;
            }
        }

        @include for-tablet-portrait-up {
            @include flexbox-width-without-columns(7.5, 16);
            margin-top: $margin-small;
            padding: 30px 30px;
            margin-left: 20px;
            margin-right: 20px;

            .basic-promo-right-align & {
                margin-right: 20px;
            }

            &-inner {
                margin-bottom: 30px;
                margin: 0;
            }
        }


        @include for-largerthan-ipad-portrait {
            $single-column-width: #{"calc(" + 1 / 14 * 100 + "% + (10px / 14))"};

            @include flexbox-width-without-columns(6, 14);
            margin-top: $margin-small;
            padding: 30px 40px;
            margin-right: $single-column-width;

            .basic-promo-right-align & {
                margin-right: 20px;
                margin-left: $single-column-width;
            }
        }
    }

    &-backdrop {
        position: absolute;
        left: 0;
        top: 0;
        right: 0;
        justify-content: flex-start;
        display: flex;

        @include for-tablet-portrait-up {
            overflow: hidden;

            .basic-promo-right-align & {
                justify-content: flex-end;
            }
        }

        @include for-tablet-portrait-up {
            max-height: $image-height-tablet;
        }

        @include for-largerthan-ipad-portrait {
            max-height: $image-height-desktop;
        }

        @media (min-width: 1780px) {
            max-height: $image-height-large-desktop;
        }
    }

    &-image-container {
        margin-bottom: 0;
        font-size: 0;
        position: relative;

        img {
            max-width: 100%;
            width: 100%;
        }

        @include for-tablet-portrait-up {
            lost-column: 9/14;
            lost-align: right;
            margin: 0;
        }
    }

    &-pattern {
        &-background {
            position: absolute;
            display: flex;
            flex: 1;
            width: 75%;
            height: 100%;
            top: -20px;
            right: fluid-margin(true);
        }

        @include for-tablet-portrait-up {
            &-background {
                width: 100%;
                top: 0;
                left: 0;
                right: 0;
            }
        }

        @each $item, $colour in $basic-promo-pattern-colours {
            &-#{$item} {

                &.basic-promo-pattern-zigzag {
                    .basic-promo-pattern-background {
                        @include pattern-zigzag($colour);
                    }
                }

                &.basic-promo-pattern-diagonal {
                    .basic-promo-pattern-background {
                        @include pattern-diagonal($colour);
                    }
                }

                &.basic-promo-pattern-weave {
                    .basic-promo-pattern-background {
                        @include pattern-weave($colour);
                    }
                }
            }
        }
    }
}
