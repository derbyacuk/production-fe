// defining the colours as a collection allows us to loop through them and generate classnames based on the keys
$search-result-promo-pattern-colours: (
    mid-blue: $mid-blue,
    strawberry: $strawberry,
    yellow: $yellow,
    primary-blue: $primary-blue,
    turquoise: $turquoise,
    orange: $orange,
    green: $green,
    green-blue: $green-blue
);

.search-result-promo {
    lost-flex-container: column;
    lost-column: 10/10;
    justify-content: space-between;
    margin-bottom: px-to-em(26);
    background-color: #f5f5f5;

    @include for-tablet-portrait-up {
        lost-flex-container: row;
    }

    &-content {
        lost-column: 10/10;
        order: 1;
        padding: 24px;

        @include for-tablet-portrait-up {
            lost-column: 7/10;
            order: 0;
            padding: 30px;
        }

        .search-result-promo-with-image & {
            @include for-tablet-portrait-up {
                lost-column: 6/10;
            }
        }

        &-title {
            @include disable-underlines;

            a {
                display: inline;
                background-image: linear-gradient(transparent calc(100% - 2px), $primary-blue 2px);
                background-repeat: no-repeat;
                background-size: 0% 100%;
                color: $primary-blue;

                &:hover,
                &:focus {
                    animation: link-hover-animation-border .5s forwards $default-animation-curve;
                    background-size: 100% 100%;
                }
            }
        }

        &-description {
            margin-top: px-to-em(16);
            margin-bottom: px-to-em(30);
        }

        &-calltoaction {
            font-size: 0;

            .button {
                margin-bottom: 0;
            }
        }
    }

    &-pattern {
        lost-column: 10/10;
        order: 0;
        background-color: $white;
        height: 80px;

        @include for-tablet-portrait-up {
            lost-column: 3/10;
            order: 1;
            background-color: #f5f5f5;
            height: auto;
        }

        @each $item, $colour in $search-result-promo-pattern-colours {
            &-#{$item} {

                &.search-result-promo-pattern-zigzag {
                        @include pattern-zigzag($colour);
                }

                &.search-result-promo-pattern-diagonal {
                        @include pattern-diagonal($colour);
                }

                &.search-result-promo-pattern-weave {
                        @include pattern-weave($colour);
                }
            }
        }
    }

    &-with-image {
        $mobile-image-width: #{'calc((100vw - (80px + 10px)) * 16/16)'};
        $tablet-image-width: #{'calc((100vw - (80px + 10px)) * 4/16)'};
        $large-desktop-image-width: #{'calc((1780px - (80px + 10px)) * 4/16)'};

        min-height: $mobile-image-width;

        @include for-tablet-portrait-up {
            min-height: $tablet-image-width;
        }

        @media (min-width: 1780px) {
            min-height: $large-desktop-image-width;
        }
    }

    &-image {
        lost-column: 10/10;
        order: 0;

        @include for-tablet-portrait-up {
            lost-column: 4/10;
            order: 1;
            height: auto;
        }

        img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
    }
}
